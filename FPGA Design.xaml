<Window x:Name="FPGADesign" x:Class="HardwareEngineeringLab4_.FPGA_Design"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:HardwareEngineeringLab4_"
        mc:Ignorable="d"
        Title="FPGA_Design" Height="898.554" Width="1315.617" MaxWidth="1315" MaxHeight="898">
    <Window.Background>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="0"/>
            <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1"/>
        </LinearGradientBrush>
    </Window.Background>
    <Grid Margin="0,0,40,32">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="25*"/>
            <ColumnDefinition Width="63*"/>
        </Grid.ColumnDefinitions>
        <RichTextBox HorizontalAlignment="Left" Height="1236" Margin="5,10,0,-23" VerticalAlignment="Top" Width="479" RenderTransformOrigin="0.5,0.5" Grid.ColumnSpan="2" ScrollViewer.CanContentScroll="True" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Visible">
            <RichTextBox.RenderTransform>
                <TransformGroup>
                    <ScaleTransform/>
                    <SkewTransform/>
                    <RotateTransform Angle="0.087"/>
                    <TranslateTransform/>
                </TransformGroup>
            </RichTextBox.RenderTransform>
            <FlowDocument>
                <Paragraph>
                    <Run Text="/*FIFO MODULE EXPLANATION  "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="First in first out, F_Data is data out and F_Data is data in "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="The depth of the FIFO is provided by FDEPTH and the width of the databus"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" is provided by FWIDTH. When is write is enabled FInN is pulled low, when read is enabled "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" FOutN is pulled low. Empty and Full status flags prevent errors to the FIFO. The Depth of the FIFO is monitored"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" against a counter variable during the read and write cycles. When the Depth is encountered the full status flag is enabled and when "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" all the data has been read the empty status flag is enabled.  The LastN and SlastN provide status flags for the First in First Out "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" functionality. The reset flag resets all variables to the default condition.  The test module FIFO does a read in and read out*/"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="`define FWIDTH 32 // Width of the FIFO."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="`define FDEPTH 6 // Depth of the FIFO.  // -1 datainput"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="`define FCWIDTH 2 // Counter Width of the FIFO 2 to power"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="                  // FCWIDTH = FDEPTH."/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="`timescale 1ns/100ps"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="// main source code for FIFO  Verilog HDL 2nd edition Samir Palnitkar"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="// Modified a minor details in the source code and generated a custom test module"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="module FIFO( Clk,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" RstN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" Data_In,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" FClrN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" FInN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" FOutN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_Data,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FullN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_LastN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_SLastN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FirstN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_EmptyN"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" );"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input Clk; // CLK signal."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input RstN; // Low Asserted Reset signal."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input [(`FWIDTH-1):0] Data_In; // Data into FIFO."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input FInN; // Write into FIFO Signal."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input FClrN; // Clear signal to FIFO."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input FOutN; // Read from FIFO signal."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="output [(`FWIDTH-1):0] F_Data; // FIFO data out."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="output F_FullN; // FIFO full indicating signal."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="output F_EmptyN; // FIFO empty indicating signal."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="output F_LastN; // FIFO Last but one signal."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="output F_SLastN; // FIFO SLast but one signal."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="output F_FirstN; // Signal indicating only one word in FIFO.   "/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg F_FullN;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg F_EmptyN;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg F_LastN;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg F_SLastN;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg F_FirstN;   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg [`FCWIDTH:0] fcounter; //counter indicates num of data in FIFO"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg [(`FCWIDTH-1):0] rd_ptr; // Current read pointer."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg [(`FCWIDTH-1):0] wr_ptr; // Current write pointer."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="wire [(`FWIDTH-1):0] FIFODataOut; // Data out from FIFO MemBlk"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="wire [(`FWIDTH-1):0] FIFODataIn; // Data into FIFO MemBlk"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="wire ReadN = FOutN;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="wire WriteN = FInN;"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="//assign F_Data = FIFODataOut;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="assign FIFODataIn = Data_In;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" FIFO_MEM_BLK memblk(.Clk(Clk),"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" .writeN(WriteN),"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" .readN(ReadN),&#x9;&#x9;     "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" .rd_addr(rd_ptr),"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" .wr_addr(wr_ptr),"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" .data_in(Data_In),"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" .data_out(F_Data)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" );    "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // Control circuitry for FIFO. If reset or clr signal is asserted,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // all the counters are set to 0. If write only the write counter"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // is incremented else if read only read counter is incremented"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // else if both, read and write counters are incremented."/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // fcounter indicates the num of items in the FIFO. Write only"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // increments the fcounter, read only decrements the counter, and"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // read &amp;&amp; write doesn't change the counter value. "/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" always @(posedge Clk or negedge RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="  if(RstN==1'b0) begin // active low reset signal"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    fcounter &lt;= 0;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    rd_ptr &lt;= 0;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    wr_ptr &lt;= 0;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    else begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    if(FClrN==1'b0 ) begin  // active low clear FIFO signal"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    fcounter &lt;= 0;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    rd_ptr &lt;= 0;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    wr_ptr &lt;= 0;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   else begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="       if(WriteN==1'b0 &amp;&amp; F_FullN==1'b1)  // active low write enable"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="       wr_ptr &lt;= wr_ptr + 1;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="      "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(ReadN==1'b0 &amp;&amp; F_EmptyN==1'b1) // active low read enable"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    rd_ptr &lt;= rd_ptr + 1;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="      "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(WriteN==1'b0 &amp;&amp; ReadN==1'b1 &amp;&amp; F_FullN==1'b1) // active low write enable only"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    fcounter &lt;= fcounter + 1;  // increments the counter"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="      "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else if(WriteN==1'b0 &amp;&amp; ReadN==1'b0 &amp;&amp; F_EmptyN==1'b1)  // active low read enable only"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    fcounter &lt;= fcounter - 1;  // decrements the counter"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="      "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end "/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // All the FIFO status signals depends on the value of fcounter."/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // If the fcounter is equal to fdepth, indicates FIFO is full."/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // If the fcounter is equal to zero, indicates the FIFO is empty."/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // F_EmptyN signal indicates FIFO Empty Status. By default it is"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // asserted, indicating the FIFO is empty. After the First Data is"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // put into the FIFO the signal is deasserted"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" always @(posedge Clk or negedge RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="      "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(RstN==1'b0)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_EmptyN &lt;= 1'b0;   // Initially the FIFO is empty"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(FClrN==1'b1) begin               //  Clear signal is active low"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(F_EmptyN==1'b0 &amp;&amp; WriteN==1'b0)  //  FIFO is empty and write is enabled "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_EmptyN &lt;= 1'b1;                   //  assert empty signal"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else if(F_FirstN==1'b0 &amp;&amp; ReadN==1'b0 &amp;&amp; WriteN==1'b1)  // If read enable is asserted, initially the FIFO is empty"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_EmptyN &lt;= 1'b0;   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_EmptyN &lt;= 1'b0;   // FIFO is empty"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end "/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // F_FirstN signal indicates that there is only one datum sitting"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // in the FIFO. When the FIFO is empty and a write to FIFO occurs,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // this signal gets asserted."/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="always @(posedge Clk or negedge RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(RstN==1'b0)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FirstN &lt;= 1'b1;  // initially firstN is high, active low because FIFO is empty"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(FClrN==1'b1) begin    // after initial reset "/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="if((F_EmptyN==1'b0 &amp;&amp; WriteN==1'b0) ||  (fcounter==2 &amp;&amp; ReadN==1'b0 &amp;&amp; WriteN==1'b1))  // FIFO is empty and write is enabled OR FIFO is not empty and read is enabled, fcounter ==2 // write is active on the next edge of the clock, time delay of #2clks and on the third clock signal "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FirstN &lt;= 1'b0;   // First write enabled "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else if (F_FirstN==1'b0 &amp;&amp; (WriteN ^ ReadN))    // If either a read or write has been executed and firstN is enabled, "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FirstN &lt;= 1'b1;    // FIFO is no longer empty"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FirstN &lt;= 1'b1;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end // always @ (posedge Clk or negedge RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="// F_SLastN indicates that there is space for only two data words"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" //in the FIFO."/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" always @(posedge Clk or negedge RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(RstN==1'b0)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_SLastN &lt;= 1'b1;  //initialize to 1"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(FClrN==1'b1) begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if( (F_LastN==1'b0 &amp;&amp; ReadN==1'b0 &amp;&amp; WriteN==1'b1) ||  (fcounter == (`FDEPTH-3) &amp;&amp; WriteN==1'b0 &amp;&amp; ReadN==1'b1)) // If read is enabled and F_LastN is enabled  OR  fcounter is depth -3 with write enabled. "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_SLastN &lt;= 1'b0; //Second to last is enabled"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="    "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else if(F_SLastN==1'b0 &amp;&amp; (ReadN ^ WriteN) )     // second to last is enabled with active read or write"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_SLastN &lt;= 1'b1;   // second to last is asserted"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_SLastN &lt;= 1'b1;   // active low"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end // always @ (posedge Clk or negedge RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // F_LastN indicates that there is one space for only one data"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // word in the FIFO."/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" always @(posedge Clk or negedge RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(RstN==1'b0)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_LastN &lt;= 1'b1;    "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else begin "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(FClrN==1'b1) begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if ((F_FullN==1'b0 &amp;&amp; ReadN==1'b0) || (fcounter == (`FDEPTH-2) &amp;&amp; WriteN==1'b0 &amp;&amp; ReadN==1'b1))"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_LastN &lt;= 1'b0;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else if(F_LastN==1'b0 &amp;&amp; (ReadN ^ WriteN) )"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_LastN &lt;= 1'b1;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_LastN &lt;= 1'b1;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end // always @ (posedge Clk or negedge RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   // F_FullN indicates that the FIFO is full."/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" always @(posedge Clk or negedge RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(!RstN)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FullN &lt;= 1'b1;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(FClrN==1'b1) begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if (F_LastN==1'b0 &amp;&amp; WriteN==1'b0 &amp;&amp; ReadN==1'b1)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FullN &lt;= 1'b0;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else if(F_FullN==1'b0 &amp;&amp; ReadN==1'b0)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FullN &lt;= 1'b1;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" else"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" F_FullN &lt;= 1'b1;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="endmodule // FIFO"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="// Configurable memory block for the FIFO"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="module FIFO_MEM_BLK( Clk,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" writeN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" readN,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" wr_addr,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" rd_addr,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" data_in,"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" data_out"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" );"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input Clk; // input Clk."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input writeN; // Write Signal to put data into fifo."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input readN;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input [(`FCWIDTH-1):0] wr_addr; // Write Address."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input [(`FCWIDTH-1):0] rd_addr; // Read Address."/>
                </Paragraph>
                <Paragraph>
                    <Run Text="input [(`FWIDTH-1):0] data_in; // DataIn in to Memory Block"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="output [(`FWIDTH-1):0] data_out; // Data Out from the Memory"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" // Block(FIFO)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg [(`FWIDTH-1):0] data_out;"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="reg [(`FWIDTH-1):0] FIFOARRAY[0:(`FDEPTH-1)];"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="  "/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="assign data_out = FIFOARRAY[rd_addr];"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="always @(posedge Clk)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="  "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="  begin"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="     "/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" if(writeN==1'b0)"/>
                </Paragraph>
                <Paragraph>
                    <Run Text=" FIFOARRAY[wr_addr] &lt;= data_in;"/>
                </Paragraph>
                <Paragraph>
                    <Run/>
                </Paragraph>
                <Paragraph>
                    <Run Text="end"/>
                </Paragraph>
                <Paragraph>
                    <Run Text="   "/>
                </Paragraph>
                <Paragraph>
                    <Run Text="endmodule"/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>
        <Label Content="Custom source focused on academic projects. Confidential information is not displayed" HorizontalAlignment="Left" Margin="286,439,0,0" VerticalAlignment="Top" Height="26" Width="479" Grid.Column="1" Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}"/>
        <Image Grid.Column="1" HorizontalAlignment="Left" Height="424" Margin="134,10,-21,0" VerticalAlignment="Top" Width="795" Source="Image32.png"/>
        <RichTextBox Grid.Column="1" HorizontalAlignment="Left" Height="361" Margin="134,493,-21,-18" VerticalAlignment="Top" Width="795" TextChanged="RichTextBox_TextChanged">
            <FlowDocument>
                <Paragraph>
                    <Run FontWeight="Bold" Text="Basic understanding of FPGA Design "/>
                    <Run Text="Reference: Xilinx Virtex 4 Handbook"/>
                </Paragraph>
                <Paragraph>
                    <Run FontWeight="Bold" Text="Clock Resources: "/>
                    <Run Text="Each device depending on size is divided into regions. "/>
                    <Run FontWeight="Bold" Text="Global Clocks "/>
                    <Run Text="Each Virtex 4 device has 32 matched-skew global clock lines that can clock all sequential resources e.g CLB, block RAM,DCMs, I/O and can drive logic signals. These global clock lines are driven by a global clock buffer and can be used as a multiplexer or clk enable ckt. The global clk buffer can select between clk sources and can switch away from a failing clock. This is driven by DCM, a DCM drives more than one global clock buffer. "/>
                    <Run FontWeight="Bold" Text="Regional Clocks "/>
                    <Run Text="Each region has two clock capable regional clock inputs. Each input can differentially or single ended drive regional clocks and I/O clocks in the same region. The feature of being able to divide the incoming clock rate in combination with the programmable serializer/deserializer in the IOB allows source-synchronous systems to cross clock domains without utilizing additional resources. "/>
                    <Run FontWeight="Bold" Text="I/O clocks "/>
                    <Run Text=": Third type of clocking resource. It serves localized I/O  ckts."/>
                </Paragraph>
                <Paragraph>
                    <Run FontWeight="Bold" Text=" Global Clocking Resources:  (1) Global clock inputs (2) Global Clock Buffers (3) Clock Tree and Nets (4) Clock Regions.   "/>
                    <Run Text="(`1)The global clk inputs range from 16 to 32 input locations and be used as I/Os if not as clock inputs. (2)There are 32 global clock buffers, inputs include DCM, Global clock input whose input can be a DCM, Rocket I/O multi-gigabit transceivers, other global clk buffer outputs and general interconnect. All global clk buffers can drive all clk regions. A clk region is a branch on the clk tree that has 8 CLB  upwards and 8 CLB downards. The clk buffers can be configured to be synchronous or asynchronous with two clk inputs. (3)  The pin access of the global ck lines are not limited to the logic resources clk pins, the global clk lines can access other pins in the CLB without using local interconnects. This architecture benefits applications that require fast signal connections for  large fanout/load. (4) Clock regions improves the clk distribution since each region can have 8 global clk domains and these 8 global clks can be drive by any combination of the 32 global clk buffers.  "/>
                    <Run FontWeight="Bold" Text="DCM : "/>
                    <Run Text="Provide the following features: Clock deskew ( it contains a delay locked loop ie. DLL, to eliminate clk distribution delays. It deskews the output clocks with respect to the input ck thr a feedback network). "/>
                    <Run FontWeight="Bold" Text="Frequency Synthesis: "/>
                    <Run Text="The user can specify any integer multiplier or divisor to generate a specific frequency. "/>
                    <Run FontWeight="Bold" Text="Phase Shifting: "/>
                    <Run Text="generates Clk90, clk180, clk270 and clk0.   The source clock (CLKIN) for the DCM comes from either of these sources IBUFG, global clk input buffer, BUFGCNTRL, internal global clk buffer or IBUF - input buffer."/>
                </Paragraph>
                <Paragraph/>
            </FlowDocument>
        </RichTextBox>
        <Button x:Name="BasicUnderstandingFPGA" Content="Basic Understanding of FPGA" Grid.Column="1" HorizontalAlignment="Left" Margin="409,470,0,0" VerticalAlignment="Top" Width="191" Click="BasicUnderstandingFPGA_Click"/>
        <Label Content="Click for Details" Grid.Column="1" HorizontalAlignment="Left" Margin="600,470,0,0" VerticalAlignment="Top"/>

    </Grid>
</Window>
